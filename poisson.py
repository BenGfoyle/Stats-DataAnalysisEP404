#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
poisson - routine to generate counts which follow the poisson
distribution; uses random event times generated by rtimegen

Created on Tue Mar  5 14:28:50 2019
@author: mfc
"""
import numpy as np
import random as rnd
import matplotlib.pyplot as plt
plt.ion

def rtimegen(rate,tmax):  
    rnd.seed(1234567)
    
    t=0.0
    tlist=[]
    while t<tmax:
        x=10.0*rnd.random()
        y=1.2*rnd.random()
        test = np.exp(-x)
        if(y<test):
            deltat=x/rate
            t=t+deltat
            tlist.append(t)        
    return tlist
    
rate=2.0
tmax=10000.0
    
tlist=rtimegen(rate,tmax)

ibin = np.zeros(10000)
nbins=30
jbin = np.zeros(nbins)

#next: the value of interval multiplied by the event rate (in Hz) used  
# in rtimegen gives the mean 'a' of the Poisson distribution

interval=2.5 #use a rate of 2Hz to give a mean value of 5.0

fid1 = open('poisson_out1.dat','w')
fid2 = open('poisson_out2.dat','w')

n = len(tlist)

for i in range(n):
    t = tlist[i]
    index = int(t/interval)
    ibin[index] = ibin[index]+1

maxval=int(tlist[n-1]/interval)+1

for i in range(maxval):
   fid1.write('%g\n' % ibin[i])   
   index = int(ibin[i])
   if index > nbins-1: index = nbins-1   
   jbin[index] = jbin[index] + 1

for i in range(nbins):
    fid2.write('bin: %g\t number of intervals: %g\n' % (i,jbin[i]))

fid1.close()
fid2.close()

xx=np.linspace(0,nbins,30)
plt.plot(xx,jbin,'*k')
plt.grid()


